<!--breadcrumb-->
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/projects">Projects</a>
        </li>
        <li class="breadcrumb-item active" aria-current="page">
            <a href="/project/{{project._id}}">{{project.name}}</a>
        </li>
    </ol>
</nav>

<!-- filter space -->
<!-- Add a filter button -->
<button type="button" class="btn btn-primary" onclick=addFilter()>Add filter </button>
<!-- filter table -->
<div id="filterTable"></div>

<table style="width:100%">
    <tr>
        <td>
            <h2>{{project.name}}</h2>
        </td>
        <td>
            <!--Add a task button-->
            <a href="/task/new/{{project._id}}"><i class="fas fa-plus-circle bigIcon" title="Add a task"> </i></a>
        </td>
    </tr>
</table>

<!-- Table with all the tasks-->
<table class="table" id="taskTable">
    <tr>
        <th>Title <p id="th_0" onclick="sort(0)" style="cursor: pointer" class = "fas fa-chevron-down"></p></th>
        <th>Assignee <p id="th_1" onclick="sort(1)" style="cursor: pointer" class = "fas fa-chevron-down"></p></th>
        <th>Start date <p id="th_2" onclick="sort(2)" style="cursor: pointer" class = "fas fa-chevron-down"></p></th>
        <th>Due date <p id="th_3" onclick="sort(3)" style="cursor: pointer" class = "fas fa-chevron-down"></p></th>
        <th>Advancement <p id="th_4" onclick="sort(4)" style="cursor: pointer" class = "fas fa-chevron-down"></p></th>
        <th>Status <p id="th_5" onclick="sort(5)" style="cursor: pointer" class = "fas fa-chevron-down"></p></th>
        <th>Priority <p id="th_6" onclick="sort(6)" style="cursor: pointer" class = "fas fa-chevron-down"></p></th>
        <th></th>
    </tr>
    {{#each tasks}}
        <tr>
            <td><a href="/task/{{this._id}}">{{this.name}}</a></td>
            <td><span class="badge badge-primary">{{this.assignee.firstname}} {{this.assignee.name}}</span></td>
            <td style="text-align: center" class="date">{{formatDate this.start_date "long"}}</td>
            <td style="text-align: center" class="date">{{formatDate this.due_date "long"}}</td>
            <td style="text-align: center">{{this.advancement}}%</td>
            <td><span class="badge badge-warning">{{this.status.name}}</span></td>
            <td style="text-align: center"><span class="badge badge-danger">{{this.priority.name}}</span></td>
            <td style="text-align: center"><a href="/task/update/{{this._id}}" title="Update task"><i class="fas fa-edit"></i></a></td>
            <td style="text-align: center"><a href="/task/remove/{{this._id}}" title="Remove task"><i class="fas fa-trash-alt"></i></a></td>
        </tr>
    {{/each}}
</table>


<script>
    //Fonction that generate the filter
    function filter(){
        let i, td, txtValue,j, option, filter, selected, value, logic;
        const filterTable = document.getElementById("filterTable");
        const taskTable = document.getElementById("taskTable").rows;
        const filters = filterTable.childNodes;
        const filtersArray = [];

        //1° Convert the filterTable into an arrayFilter
        for (j = 0; j < filters.length; j = j+2){
            filter = filters[j].getElementsByTagName("table")[0].rows[0].cells;
            option = filter[0].getElementsByTagName("select")[0].selectedIndex;
            //search if the user have chosen "and" or "or" (or by default for the first filter)
            if (j > 0){
                logic = filters[j-1].getElementsByTagName("select")[0].selectedIndex;
            }
            else{
                logic = 1;
            }

            //get the filter value and add the info the filterArray
            if (isDate(option)){
                value = filter[2].getElementsByTagName("input")[0].valueAsDate;
                if(value != null){
                    filtersArray.push([logic, option, filter[1].getElementsByTagName("select")[0].selectedIndex, value]);
                }
            }
            else if (isInt(option)){
                value = filter[2].getElementsByTagName("input")[0].value;
                document.getElementById("test").innerText = value;
                if (value !== ""){
                    filtersArray.push([logic, option, filter[1].getElementsByTagName("select")[0].selectedIndex, value]);
                }
            }
            else{
                value = filter[1].getElementsByTagName("input")[0].value.toUpperCase();
                if (value !== ""){
                    filtersArray.push([logic, option, value]);
                }
            }
        }

        //2° Filter the taskTable
        for (i = 1; i < taskTable.length; i++){
            if(filtersArray.length === 0){
                selected = true;
            }
            else{
                selected = !filtersArray[0][0];
            }
            td = taskTable[i].cells;
            selected = filtersArray.reduce((accumulator, currentValue) => {
                option = currentValue[1];
                txtValue = td[option].textContent || td[option].innerText;
                if (isDate(option)){
                    if (currentValue[2] == 0){
                        logic = (new Date(Date.parse(txtValue))) <= currentValue[3];
                    }
                    else{
                        logic = (new Date(Date.parse(txtValue))) >= currentValue[3];
                    }
                }
                else if(option === 4){
                    if (currentValue[2] === 0){
                        logic = txtValue <= currentValue[3];
                    }
                    else{
                        logic = txtValue >= currentValue[3];
                    }
                }
                else{
                    logic = txtValue.toUpperCase().indexOf(currentValue[2]) > -1;
                }

                if (currentValue[0] == 0){
                    return accumulator && logic;
                }
                else{
                    return accumulator || logic;
                }
            }, selected);

            if(selected){
                taskTable[i].style.display = "";
            }else{
                taskTable[i].style.display = "none";
            }
        }
    }

    function sort(n){
        var table,rows,switching,i,x,y,shouldSwitch, dir, switchCount = 0
        table = document.getElementById("taskTable");
        switching = true;
        dir = "asc";
        while (switching){
            switching = false;
            rows = table.rows;
            for (i = 1; i < (rows.length - 1); i++){
                shouldSwitch = false;
                x = rows[i].cells[n].innerText.toLowerCase();
                y = rows[i + 1].cells[n].innerText.toLowerCase();
                if (isDate(n)){
                    x = new Date(Date.parse(x));
                    y = new Date(Date.parse(y));
                }
                if (dir == "asc"){
                    if (x > y) {
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir == "desc"){
                    if (x < y){
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                switchCount++;
            }
            else{
                if (switchCount == 0 && dir == "asc"){
                    dir = "desc";
                    switching = true;
                }
            }
        }
        if (dir == "asc"){
            document.getElementById("th_" + n).className = "fas fa-chevron-up";
        }
        else{
            document.getElementById("th_" + n).className = "fas fa-chevron-down";
        }
    }

    function isDate(index){
        return (index == 3 || index == 2);
    }

    function isInt(index){
        return index == 4;
    }

    function addFilter(){
        var table = document.getElementById("filterTable");
        var length = table.childNodes.length;
        if (length > 0) {
            if(table.childNodes[0].toString() === "[object Text]"){
                table.removeChild(table.childNodes[0]);
            }
            else{
                var logicCell = document.createElement("div");
                logicCell.innerHTML = "{{{logicFilter}}}";
                logicCell.style.cssFloat = "left";
                table.appendChild(logicCell);
            }
        }
        var cell = document.createElement("div");
        cell.innerHTML = "{{{formatFilter }}}";
        cell.style.cssFloat = "left";
        cell.getElementsByTagName("button")[0].onclick = suppressFilter;
        cell.getElementsByTagName("select")[0].onchange = choiceChanged;
        table.appendChild(cell);
    }

    function choiceChanged(){
        var row = this.closest("table").rows[0];
        if (isDate(row.cells[0].getElementsByTagName("select")[0].selectedIndex)){
            if (row.cells.length == 3){
                var cell = row.insertCell(1);
                cell.innerHTML = "{{{dateFilter}}}";
            }
            row.cells[2].getElementsByTagName("input")[0].type = "date";
            row.cells[2].getElementsByTagName("input")[0].value = "";
        }
        else if(row.cells[0].getElementsByTagName("select")[0].selectedIndex == 4){
            if (row.cells.length == 3){
                var cell = row.insertCell(1);
                cell.innerHTML = "{{{dateFilter}}}";
            }
            row.cells[2].getElementsByTagName("input")[0].type = "text";
            row.cells[2].getElementsByTagName("input")[0].value = "";
        }
        else{
            if (row.cells.length == 4){
                row.deleteCell(1);
            }
            row.cells[1].getElementsByTagName("input")[0].type = "text";
            row.cells[1].getElementsByTagName("input")[0].value = "";
        }
        filter();
    }

    function suppressFilter(){
        var previous =  this.closest("table").parentNode.previousSibling;
        var next = this.closest("table").parentNode.nextSibling;
        document.getElementById("filterTable").removeChild(this.closest("table").parentNode);
        if (previous != null){
            document.getElementById("filterTable").removeChild(previous);
        }
        else if (next != null){
            document.getElementById("filterTable").removeChild(next);
        }
        filter();
    }
</script>

