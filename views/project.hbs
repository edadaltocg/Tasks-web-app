<!--breadcrumb-->
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/projects">Projects</a>
        </li>
        <li class="breadcrumb-item active" aria-current="page">
            <a href="/project/{{project._id}}">{{project.name}}</a>
        </li>
    </ol>
</nav>

<!-- filter space -->
<div>
    <!-- Add a filter button -->
    <button type="button" class="btn btn-primary" style= "margin-bottom:10px" onclick=addFilter()>Add filter </button>
    <!-- filter table -->
    <div id="filterTable"></div>
</div>

<table style="width:100%; margin-top: 30px">
    <tr>
        <td>
            <h2>{{project.name}}</h2>
        </td>
        <td>
            <!--Add a task button-->
            <a href="/task/new/{{project._id}}"><i class="fas fa-plus-circle bigIcon" title="Add a task"> </i></a>
        </td>
    </tr>
</table>

<!-- Table with all the tasks-->
<table class="table" id="taskTable">
    <tr>
        <th>Title <p id="th_0" onclick="sort(0)" style="cursor: pointer" class = "fas fa-chevron-down"></p></th>
        <th>Assignee <p id="th_1" onclick="sort(1)" style="cursor: pointer" class = "fas fa-chevron-down"></p></th>
        <th>Start date <p id="th_2" onclick="sort(2)" style="cursor: pointer" class = "fas fa-chevron-down"></p></th>
        <th>Due date <p id="th_3" onclick="sort(3)" style="cursor: pointer" class = "fas fa-chevron-down"></p></th>
        <th>Advancement <p id="th_4" onclick="sort(4)" style="cursor: pointer" class = "fas fa-chevron-down"></p></th>
        <th>Status <p id="th_5" onclick="sort(5)" style="cursor: pointer" class = "fas fa-chevron-down"></p></th>
        <th>Priority <p id="th_6" onclick="sort(6)" style="cursor: pointer" class = "fas fa-chevron-down"></p></th>
        <th></th>
    </tr>
    {{#each tasks}}
        <tr>
            <td><a href="/task/{{this._id}}">{{this.name}}</a></td>
            <td><span class="badge badge-primary">{{this.assignee.firstname}} {{this.assignee.name}}</span></td>
            <td style="text-align: center" class="date">{{formatDate this.start_date "long"}}</td>
            <td style="text-align: center" class="date">{{formatDate this.due_date "long"}}</td>
            <td style="text-align: center">{{this.advancement}}%</td>
            <td><span class="badge badge-warning">{{this.status.name}}</span></td>
            <td style="text-align: center"><span class="badge badge-danger">{{this.priority.name}}</span></td>
            <td style="text-align: center"><a href="/task/update/{{this._id}}" title="Update task"><i class="fas fa-edit"></i></a></td>
            <td style="text-align: center"><a href="/task/remove/{{this._id}}" title="Remove task"><i class="fas fa-trash-alt"></i></a></td>
        </tr>
    {{/each}}
</table>

<script>
    //Fonction that generate the filter
    function filter(){
        let i, td, txtValue,option, filter, selected, value, logic;
        //get the task table rows
        const taskTable = document.getElementById("taskTable").rows;
        //get the filter columns (filterTable is div not table)
        const filterTable = document.getElementById("filterTable");
        const filters = filterTable.childNodes;
        const filtersArray = [];

        //1째 Convert the filterTable into an arrayFilter
        for (i = 0; i < filters.length; i = i+2){
            //get the filter number i
            filter = filters[i].getElementsByTagName("table")[0].rows[0].cells;
            //get the filter's option
            option = filter[0].getElementsByTagName("select")[0].selectedIndex;
            //search if the user have chosen "and" or "or" (or by default for the first filter)
            if (i > 0){
                logic = filters[i-1].getElementsByTagName("select")[0].selectedIndex;
            }
            else{
                logic = 1;
            }

            //get the filter value and add the info in the filterArray
            if (isDate(option)){
                //get the filter value
                value = filter[2].getElementsByTagName("input")[0].valueAsDate;
                //search if the user have chosen "before" or "after"
                logic = filter[1].getElementsByTagName("select")[0].selectedIndex;
                if(value != null){
                    filtersArray.push([logic, option, value]);
                }
            }
            else if (isInt(option)){
                //get the filter value
                value = filter[2].getElementsByTagName("input")[0].value;
                //search if the user have chosen "before" or "after"
                logic = filter[1].getElementsByTagName("select")[0].selectedIndex;
                if (value !== ""){
                    filtersArray.push([logic, option, logic, parseInt(value, 10)]);
                }
            }
            else{
                //get the filter value
                value = filter[1].getElementsByTagName("input")[0].value.toUpperCase();
                if (value !== ""){
                    filtersArray.push([logic, option, value]);
                }
            }
        }

        //2째 Filter the taskTable
        for (i = 1; i < taskTable.length; i++){
            if(filtersArray.length === 0){
                //by default, nothing is filtered
                selected = true;
            }
            else{
                selected = !filtersArray[0][0];
            }

            //get the row i
            td = taskTable[i].cells;

            //Apply each filter to the row
            selected = filtersArray.reduce((accumulator, currentValue) => {
                //1째 filter the row with the current filter
                option = currentValue[1];
                //get the line content
                txtValue = td[option].textContent || td[option].innerText;
                //compare the line content with the filter, depending on the value type (date, int, string)
                if (isDate(option)){
                    if (currentValue[2] === 0){ //the user chooses before
                        logic = (new Date(Date.parse(txtValue))) <= currentValue[3];
                    }
                    else{ //the user chooses after
                        logic = (new Date(Date.parse(txtValue))) >= currentValue[3];
                    }
                }
                else if(isInt(option)){
                    if (currentValue[2] === 0){ //the user chooses before
                        logic = parseInt(txtValue, 10) <= currentValue[3];
                    }
                    else{ //the user chooses after
                        logic = parseInt(txtValue, 10) >= currentValue[3];
                    }
                }
                else{
                    //check if the line content contains the filter content
                    logic = txtValue.toUpperCase().indexOf(currentValue[2]) > -1;
                }

                //2째 add the previous filter results to the current filter depending on the user choice ("and" or "or")
                if (currentValue[0] === 0){
                    return accumulator && logic;
                }
                else{
                    return accumulator || logic;
                }
            }, selected);

            //hide or not the line depending on the filters result
            if(selected){
                taskTable[i].style.display = "";
            }else{
                taskTable[i].style.display = "none";
            }
        }
    }

    //sort the taskTable : by default, it sorts ascending but if it is already sorted, sort descending
    function sort(n){
        let table,switching,i,x,y,shouldSwitch, dir, switchCount = 0;
        //get the taskTable rows
        table = document.getElementById("taskTable").rows;
        //by default, sort ascending
        switching = true;
        dir = "asc";
        while (switching){
            switching = false;
            for (i = 1; i < (table.length - 1); i++){
                shouldSwitch = false;
                //compare the i and i + 1 row, depending on the column's type (date or not)
                x = table[i].cells[n].innerText.toLowerCase();
                y = table[i + 1].cells[n].innerText.toLowerCase();
                if (isDate(n)){
                    x = new Date(Date.parse(x));
                    y = new Date(Date.parse(y));
                }
                else if (isInt(n)){
                    x = parseInt(x, 10);
                    y = parseInt(y, 10);
                }
                if (dir === "asc"){
                    if (x > y) {
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir === "desc"){
                    if (x < y){
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            //switch the two lines if needed
            if (shouldSwitch) {
                table[i].parentNode.insertBefore(table[i + 1], table[i]);
                switching = true;
                switchCount++;
            }
            else{
                // the table is already ascending sorted: should sort descending
                if (switchCount === 0 && dir === "asc"){
                    dir = "desc";
                    switching = true;
                }
            }
        }
        //change the arrow's orientation
        if (dir === "asc"){
            document.getElementById("th_" + n).className = "fas fa-chevron-up";
        }
        else{
            document.getElementById("th_" + n).className = "fas fa-chevron-down";
        }
    }

    function isDate(index){
        return (index === 3 || index === 2);
    }

    function isInt(index){
        return index === 4;
    }

    //add a filter (call when the addFilter button is clicked)
    function addFilter(){
        //get the filter table
        const table = document.getElementById("filterTable");
        const length = table.childNodes.length;
        //if the filter is not empty, add the and/or button first
        if (length > 0) {
            //by default, the div class have an empty string child
            if(table.childNodes[0].toString() === "[object Text]"){
                table.removeChild(table.childNodes[0]);
            }
            else{
                //create a new div that contain a and/or selected button
                let logicCell = document.createElement("div");
                logicCell.innerHTML = "{{{logicFilter}}}";
                logicCell.style.cssFloat = "left";
                logicCell.className="logic";
                table.appendChild(logicCell);
            }
        }
        //create a new div that contains the filter
        let cell = document.createElement("div");
        cell.innerHTML = "{{{formatFilter }}}";
        cell.style.cssFloat = "left";
        cell.className="filter";
        cell.getElementsByTagName("button")[0].onclick = suppressFilter;
        cell.getElementsByTagName("select")[0].onchange = choiceChanged;
        table.appendChild(cell);
    }

    function choiceChanged(){
        //get the filter that should be changed
        const row = this.closest("table").rows[0];

        //change the option depending on the new filter type
        const option = row.cells[0].getElementsByTagName("select")[0].selectedIndex;
        if (isDate(option)){
            //add a before/after choice if needed
            if (row.cells.length === 3){
                row.insertCell(1);
            }
            row.cells[1].innerHTML = "{{{dateFilter}}}";
            row.cells[2].getElementsByTagName("input")[0].type = "date";
            row.cells[2].getElementsByTagName("input")[0].value = "";
        }

        else if(isInt(option)){
            //add a before/after choice if needed
            if (row.cells.length === 3){
                row.insertCell(1);
            }
            row.cells[1].innerHTML = "{{{intFilter}}}";
            row.cells[2].getElementsByTagName("input")[0].type = "text";
            row.cells[2].getElementsByTagName("input")[0].value = "";
        }
        else{
            //delete the before/after if needed
            if (row.cells.length === 4){
                row.deleteCell(1);
            }
            row.cells[1].getElementsByTagName("input")[0].type = "text";
            row.cells[1].getElementsByTagName("input")[0].value = "";
        }
        filter();
    }

    function suppressFilter(){
        // get the previous and next element of the clicked filter
        let previous =  this.closest("table").parentNode.previousSibling;
        let next = this.closest("table").parentNode.nextSibling;
        //remove the clicked filtered from the filterTable
        document.getElementById("filterTable").removeChild(this.closest("table").parentNode);
        //if the clicked filter is not the first one, suppress the and/or button
        if (previous != null){
            document.getElementById("filterTable").removeChild(previous);
        }
        //if the clicked filter is the first but not the only one, suppress the and/or button
        else if (next != null){
            document.getElementById("filterTable").removeChild(next);
        }
        filter();
    }
</script>

